Proceso Main	
	Leer N_SERVER_MIN, N_SERVER_MAX, MAX_ESPERA
	
	Dimension TiempoAcumuladoServidor(N_SERVER_MAX)
	Dimension TiempoEncendidoServidor(N_SERVER_MAX)
	
	N <- N_SERVER_MIN
	PORC_TIPO_ESTATICO <- 0.8
	T <- 0
	MAX_ESPERA <- 100
	Dimension TPS(REQ_MAX_SERVER * N_SERVER_MAX)
	
	Repetir
		menor_salida <- MenorTPS(TPS, N)
		
		Si TPLL <= TPS(menor_salida) Entonces
			
			// LLegada Request
			
			// Avanzo T
			T <- TPLL
			
			// EFNC
			IA <- Intervalo_Arribos()
			TPLL <- T + IA			
			
			// Arrepentimiento?
			Rechaza <- Rechaza_Request(REQS)
			
			RequestRecibidas <- RequestRecibidas + 1
			
			si no Rechaza Entonces
				
				// Actualizo el vector de estado
				REQS <- REQS + 1
				
				ReqEsperando <- REQS - Requests_Atendiendose(TPS, N)
				
				si ReqEsperando > MAX_ESPERA Entonces
					
					si N < N_MAX_SERVIDOR Entonces
						//Actualizo vector de estado
						N <- N + 1
						
						// EFC
						TiempoEncendido <- DemoraEncendido()
						Para i <- 0 Hasta Minimo(ReqEsperando, REQ_MAX_SER)
							libre <- Puesto_Libre(TPS, N)
							SI AZAR(1) < PORC_TIPO_ESTATICO Entonces
								TA <- TiempoAtencion_Estatico()
							Sino
								TA <- TiempoAtencion_Dinamico()
							FinSi
							TPS[libre] <- T + TA + TiempoEncendido
							STA <- STA + TA
						FinPara
						CantidadEncendidos <- CantidadEncendidos + 1
						NumeroServidor <- ObtenerServidor(libre)
						TiempoEncendidoServidor[NumeroServidor] <- T
					FinSi
					SumLlegadas <- SumLlegadas + T
					
				Sino
					
					// EFC
					si REQS <= N * REQ_MAX_SER Entonces
						libre <- Puesto_Libre(TPS, N)
						
						SI AZAR(1) < PORC_TIPO_ESTATICO Entonces
							TA <- TiempoAtencion_Estatico()
						Sino
							TA <- TiempoAtencion_Dinamico()
						FinSi
						TPS[libre] <- T + TA
						STA <- STA + TA
					FinSi
				FinSi
			Sino
				RequestRechazadas <- RequestRechazadas + 1
			FinSi
		Sino
			// Salida Request
			T <- TPS[menor_salida]
			
			// Actualizacion vector de estado
			REQS <- REQS - 1
			Si Servidor_Vacio(menor_salida, TPS) Entonces
				N <- N - 1
				TiempoAcumuladoServidor[menor_salida] <- T - TiempoEncendidoServidor[menor_salida]
			FinSi
			
			// EFC
			si REQS >= N * REQ_MAX_SERVER Entonces
				SI AZAR(1) < PORC_TIPO_ESTATICO Entonces
					TA <- TiempoAtencion_Estatico()
				Sino
					TA <- TiempoAtencion_Dinamico()
				FinSi
				STA <- STA + TA
				TPS[menor_salida] <- T + TA
			Sino
				TPS[menor_salida] <- H_V
			FinSi
			SumSalidas <- SumSalidas + T
			
		FinSi
	Hasta Que T <= TF
	
	//Calculo de Resultados
	
	Para i <- 0 Hasta N_MAX_SERVER
		Costo_Tiempo = Costo_Tiempo + TiempoAcumuladoServidor[i]/3600 * COSTO_TIEMPO
	FinPara
	
	CostoTotal <- (CantidadEncendidos * COSTO_ENCENDIDO) + Costo_Tiempo
	
	TiempoEsperaTotal <- SumSalidas - SumLlegadas
	
	
	PROM_COSTO <- CostoTotal / (TF/(60*60*24*30))
	PORC_REQ_RECHAZADAS <- RequestRechazadas * 100 / RequestRecibidas
	PROM_ESPERA <- (TiempoEsperaTotal-STA) / (RequestRecibidas - RequestRechazadas)
	PROM_RESPUESTA <- (TiempoEsperaTotal-STA) / (RequestRecibidas - RequestRechazadas)
	//Impresion de Resultados
	
	Mostrar N, N_MIN_SERVER, N_MAX_SERVER
	Mostrar PROM_COSTO, PORC_REQ_RECHAZADAS, PROM_ESPERA, PROM_RESPUESTA
	
	
FinProceso

Funcion SERV <- Servidor_Vacio(socket, TPS)
	servidor <- socket / REQ_MAX_SERVER // division entera
	ret <- Verdadero
	i <- servidor * REQ_MAX_SERVER
	max <- (servidor + 1) * REQ_MAX_SERVER
	Mientras (i <  max) & ret Hacer
		Si TPS[i] <> H_V
			ret <- Falso
		FinSi
	Fin Mientras
	
	SERV <- ret
FinFuncion

funcion PL <- Puesto_Libre(TPS, N) 
	ret <- -1
	i <- 0
	
	Mientras (N * REQ_MAX_SERVER <= i) & ret <> -1 Hacer
		
		Si TPS[i]  <> H_V
			ret <- (i / REQ_MAX_SERVER) // asumiendo que / es div entera
		FinSi
		
		i <- i + 1
	Fin Mientras
	
	PL <- ret
FinFuncion

Funcion Rechaza <- Rechaza_Request(REQS)
	Rechaza <- REQS > (REQ_MAX_SERVER * N_SERVER_MAX + MAX_ENCOLADOS)
FinFuncion

Funcion Cantidad <- Requests_Atendiendose(TPS, N)
	Cantidad <- 0
FinFuncion

Funcion MIN <- MenorTPS(TPS, N)
	Para i <- 0 Hasta N * REQ_MAX_SERVER - 1 Con Paso paso Hacer
		MIN <- Minimo(TPS[i], TPS[i + 1])
	Fin Para
FinFuncion

Funcion IA <- Intervalo_Arribos()
	IA <- 0
FinFuncion

Funcion MIN <- Minimo(X1, X2)
	Si X1 < X2
		MIN <- X1
	SiNo
		MIN <- X2
	FinSi
FinFuncion

Funcion TA <- TiempoAtencion_Estatico
	
FinFuncion

Funcion TA <- TiempoAtencion_Dinamico
	
FinFuncion

Funcion DE <- DemoraEncendido()
	DE <- 0
FinFuncion

Funcion SERV <- ObtenerServidor(libre)
	SERV <- libre / REQ_MAX_SERVER
FinFuncion
	